// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"empty",
		"kwdVar",
		"=",
		"kwdType",
		"identifier",
		"kwdConst",
		",",
		"||",
		"&&",
		"+",
		"-",
		"*",
		"/",
		"(",
		")",
		"==",
		"!=",
		"<=",
		"<",
		">=",
		">",
		"!",
		"intLit",
		"{",
		"}",
		".",
		"[",
		"]",
		"kwdFunc",
		"type",
		"kwdStruct",
		"terminator",
		":",
		"kwdRet",
		"kwdBreak",
		"kwdContinue",
		"kwdGoto",
		"kwdIf",
		"kwdElse",
		"kwdSwitch",
		"kwdCase",
		"kwdDefault",
		"kwdFor",
		"defer",
		"printInt",
		"++",
		"--",
		"assignOp",
		"shortAssign",
		"boolLit",
		"floatLit",
		"kwdImport",
		"kwdPackage",
		"kwdRange",
		"runeLit",
		"stringLit",
	},

	idMap: map[string]Type{
		"INVALID":     0,
		"$":           1,
		"empty":       2,
		"kwdVar":      3,
		"=":           4,
		"kwdType":     5,
		"identifier":  6,
		"kwdConst":    7,
		",":           8,
		"||":          9,
		"&&":          10,
		"+":           11,
		"-":           12,
		"*":           13,
		"/":           14,
		"(":           15,
		")":           16,
		"==":          17,
		"!=":          18,
		"<=":          19,
		"<":           20,
		">=":          21,
		">":           22,
		"!":           23,
		"intLit":      24,
		"{":           25,
		"}":           26,
		".":           27,
		"[":           28,
		"]":           29,
		"kwdFunc":     30,
		"type":        31,
		"kwdStruct":   32,
		"terminator":  33,
		":":           34,
		"kwdRet":      35,
		"kwdBreak":    36,
		"kwdContinue": 37,
		"kwdGoto":     38,
		"kwdIf":       39,
		"kwdElse":     40,
		"kwdSwitch":   41,
		"kwdCase":     42,
		"kwdDefault":  43,
		"kwdFor":      44,
		"defer":       45,
		"printInt":    46,
		"++":          47,
		"--":          48,
		"assignOp":    49,
		"shortAssign": 50,
		"boolLit":     51,
		"floatLit":    52,
		"kwdImport":   53,
		"kwdPackage":  54,
		"kwdRange":    55,
		"runeLit":     56,
		"stringLit":   57,
	},
}
