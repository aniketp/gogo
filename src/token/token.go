// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"identifier",
		"(",
		")",
		"[",
		"intLit",
		"]",
		"assignOp",
		"binaryOp",
		"blankIdent",
		"blockBegin",
		"blockEnd",
		"boolConst",
		"dotOp",
		"escapeChar",
		"floatLit",
		"kwdBreak",
		"kwdCase",
		"kwdConst",
		"kwdContinue",
		"kwdDefault",
		"kwdDefer",
		"kwdElse",
		"kwdFor",
		"kwdFunc",
		"kwdGoto",
		"kwdIf",
		"kwdImport",
		"kwdNil",
		"kwdPackage",
		"kwdRange",
		"kwdRet",
		"kwdSet",
		"kwdStruct",
		"kwdSwitch",
		"kwdType",
		"kwdVar",
		"runeLit",
		"separator",
		"shortAssign",
		"stringLit",
		"terminator",
		"type",
		"unaryOp",
	},

	idMap: map[string]Type{
		"INVALID":     0,
		"$":           1,
		"identifier":  2,
		"(":           3,
		")":           4,
		"[":           5,
		"intLit":      6,
		"]":           7,
		"assignOp":    8,
		"binaryOp":    9,
		"blankIdent":  10,
		"blockBegin":  11,
		"blockEnd":    12,
		"boolConst":   13,
		"dotOp":       14,
		"escapeChar":  15,
		"floatLit":    16,
		"kwdBreak":    17,
		"kwdCase":     18,
		"kwdConst":    19,
		"kwdContinue": 20,
		"kwdDefault":  21,
		"kwdDefer":    22,
		"kwdElse":     23,
		"kwdFor":      24,
		"kwdFunc":     25,
		"kwdGoto":     26,
		"kwdIf":       27,
		"kwdImport":   28,
		"kwdNil":      29,
		"kwdPackage":  30,
		"kwdRange":    31,
		"kwdRet":      32,
		"kwdSet":      33,
		"kwdStruct":   34,
		"kwdSwitch":   35,
		"kwdType":     36,
		"kwdVar":      37,
		"runeLit":     38,
		"separator":   39,
		"shortAssign": 40,
		"stringLit":   41,
		"terminator":  42,
		"type":        43,
		"unaryOp":     44,
	},
}
