// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"home/zeebu/asgn2/src/token"
)

const (
	NoState    = -1
	NumStates  = 175
	NumSymbols = 237
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: ','
1: ':'
2: ';'
3: '\n'
4: ';'
5: '\n'
6: 'b'
7: 'r'
8: 'e'
9: 'a'
10: 'k'
11: 'c'
12: 'a'
13: 's'
14: 'e'
15: 'c'
16: 'o'
17: 'n'
18: 's'
19: 't'
20: 'c'
21: 'o'
22: 'n'
23: 't'
24: 'i'
25: 'n'
26: 'u'
27: 'e'
28: 'd'
29: 'e'
30: 'f'
31: 'a'
32: 'u'
33: 'l'
34: 't'
35: 'd'
36: 'e'
37: 'f'
38: 'e'
39: 'r'
40: 'e'
41: 'l'
42: 's'
43: 'e'
44: 'f'
45: 'u'
46: 'n'
47: 'c'
48: 'f'
49: 'o'
50: 'r'
51: 'g'
52: 'o'
53: 't'
54: 'o'
55: 'i'
56: 'f'
57: 'i'
58: 'm'
59: 'p'
60: 'o'
61: 'r'
62: 't'
63: 'n'
64: 'i'
65: 'l'
66: 'p'
67: 'a'
68: 'c'
69: 'k'
70: 'a'
71: 'g'
72: 'e'
73: 'r'
74: 'a'
75: 'n'
76: 'g'
77: 'e'
78: 'r'
79: 'e'
80: 't'
81: 'u'
82: 'r'
83: 'n'
84: 's'
85: 'e'
86: 't'
87: 's'
88: 't'
89: 'r'
90: 'u'
91: 'c'
92: 't'
93: 's'
94: 'w'
95: 'i'
96: 't'
97: 'c'
98: 'h'
99: 't'
100: 'y'
101: 'p'
102: 'e'
103: 'v'
104: 'a'
105: 'r'
106: 'b'
107: 'o'
108: 'o'
109: 'l'
110: 'i'
111: 'n'
112: 't'
113: 'f'
114: 'l'
115: 'o'
116: 'a'
117: 't'
118: '3'
119: '2'
120: 'f'
121: 'l'
122: 'o'
123: 'a'
124: 't'
125: '6'
126: '4'
127: 'b'
128: 'y'
129: 't'
130: 'e'
131: 's'
132: 't'
133: 'r'
134: 'i'
135: 'n'
136: 'g'
137: 't'
138: 'r'
139: 'u'
140: 'e'
141: 'f'
142: 'a'
143: 'l'
144: 's'
145: 'e'
146: '\'
147: 'n'
148: '\'
149: 'r'
150: '\'
151: 't'
152: '\'
153: '|'
154: '|'
155: '&'
156: '&'
157: '+'
158: '-'
159: '!'
160: '^'
161: '*'
162: '&'
163: '<'
164: '-'
165: '='
166: ':'
167: '='
168: '.'
169: '{'
170: '}'
171: '_'
172: '.'
173: '.'
174: '''
175: '\'
176: '''
177: '('
178: ')'
179: '['
180: ']'
181: '='
182: '='
183: '!'
184: '='
185: '<'
186: '<'
187: '='
188: '>'
189: '>'
190: '='
191: '+'
192: '-'
193: '|'
194: '^'
195: '*'
196: '/'
197: '%'
198: '<'
199: '<'
200: '>'
201: '>'
202: '&'
203: '&'
204: '^'
205: '/'
206: '/'
207: '\n'
208: '/'
209: '*'
210: '*'
211: '*'
212: '/'
213: '_'
214: '0'
215: '0'
216: 'x'
217: 'X'
218: 'e'
219: 'E'
220: '+'
221: '-'
222: '`'
223: '`'
224: '"'
225: '"'
226: ' '
227: '\t'
228: '\r'
229: 'a'-'z'
230: 'A'-'Z'
231: '0'-'9'
232: '0'-'7'
233: 'a'-'f'
234: 'A'-'F'
235: '1'-'9'
236: .
*/
